// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v3.6.1
// source: sample.proto

package sample

import (
	_ "github.com/golang/protobuf/ptypes/any"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type TestMessage_FOO int32

const (
	TestMessage_UNKNOWN TestMessage_FOO = 0
	TestMessage_V1      TestMessage_FOO = 1
)

// Enum value maps for TestMessage_FOO.
var (
	TestMessage_FOO_name = map[int32]string{
		0: "UNKNOWN",
		1: "V1",
	}
	TestMessage_FOO_value = map[string]int32{
		"UNKNOWN": 0,
		"V1":      1,
	}
)

func (x TestMessage_FOO) Enum() *TestMessage_FOO {
	p := new(TestMessage_FOO)
	*p = x
	return p
}

func (x TestMessage_FOO) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestMessage_FOO) Descriptor() protoreflect.EnumDescriptor {
	return file_sample_proto_enumTypes[0].Descriptor()
}

func (TestMessage_FOO) Type() protoreflect.EnumType {
	return &file_sample_proto_enumTypes[0]
}

func (x TestMessage_FOO) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestMessage_FOO.Descriptor instead.
func (TestMessage_FOO) EnumDescriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{1, 0}
}

type SubMessage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id            int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubMessage) Reset() {
	*x = SubMessage{}
	mi := &file_sample_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubMessage) ProtoMessage() {}

func (x *SubMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubMessage.ProtoReflect.Descriptor instead.
func (*SubMessage) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{0}
}

func (x *SubMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SubMessage) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type TestMessage struct {
	state          protoimpl.MessageState     `protogen:"open.v1"`
	NumberVal      int64                      `protobuf:"varint,1,opt,name=numberVal,proto3" json:"numberVal,omitempty"`
	StringVal      string                     `protobuf:"bytes,2,opt,name=stringVal,proto3" json:"stringVal,omitempty"`
	FloatNum       float32                    `protobuf:"fixed32,3,opt,name=floatNum,proto3" json:"floatNum,omitempty"`
	Fixed32Num     uint32                     `protobuf:"fixed32,4,opt,name=fixed32Num,proto3" json:"fixed32Num,omitempty"`
	Fixed64Num     uint64                     `protobuf:"fixed64,5,opt,name=fixed64Num,proto3" json:"fixed64Num,omitempty"`
	DoubleNum      float64                    `protobuf:"fixed64,6,opt,name=doubleNum,proto3" json:"doubleNum,omitempty"`
	SubMessage     *SubMessage                `protobuf:"bytes,7,opt,name=subMessage,proto3" json:"subMessage,omitempty"`
	EnumValue      TestMessage_FOO            `protobuf:"varint,8,opt,name=enumValue,proto3,enum=TestMessage_FOO" json:"enumValue,omitempty"`
	Number32Val    int32                      `protobuf:"varint,9,opt,name=number32Val,proto3" json:"number32Val,omitempty"`
	Snumber32Val   int32                      `protobuf:"zigzag32,10,opt,name=snumber32Val,proto3" json:"snumber32Val,omitempty"`
	Snumber64Val   int64                      `protobuf:"zigzag64,11,opt,name=snumber64Val,proto3" json:"snumber64Val,omitempty"`
	Unumber32Val   uint32                     `protobuf:"varint,12,opt,name=unumber32Val,proto3" json:"unumber32Val,omitempty"`
	Unumber64Val   uint64                     `protobuf:"varint,13,opt,name=unumber64Val,proto3" json:"unumber64Val,omitempty"`
	Sfixed32Num    int32                      `protobuf:"fixed32,14,opt,name=sfixed32Num,proto3" json:"sfixed32Num,omitempty"`
	Sfixed64Num    int64                      `protobuf:"fixed64,15,opt,name=sfixed64Num,proto3" json:"sfixed64Num,omitempty"`
	BytesVAl       []byte                     `protobuf:"bytes,16,opt,name=bytesVAl,proto3" json:"bytesVAl,omitempty"`
	UnpacketInts   []int32                    `protobuf:"varint,17,rep,name=unpacketInts,proto3" json:"unpacketInts,omitempty"`
	PacketInts     []uint32                   `protobuf:"varint,18,rep,packed,name=packetInts,proto3" json:"packetInts,omitempty"`
	SubMessages    []*SubMessage              `protobuf:"bytes,19,rep,name=subMessages,proto3" json:"subMessages,omitempty"`
	RepeatedBytes  [][]byte                   `protobuf:"bytes,20,rep,name=repeatedBytes,proto3" json:"repeatedBytes,omitempty"`
	RepeatedString []string                   `protobuf:"bytes,21,rep,name=repeatedString,proto3" json:"repeatedString,omitempty"`
	PackedSfixed32 []int32                    `protobuf:"fixed32,22,rep,packed,name=packedSfixed32,proto3" json:"packedSfixed32,omitempty"`
	MaxInt         int64                      `protobuf:"varint,23,opt,name=maxInt,proto3" json:"maxInt,omitempty"`
	MinInt         int64                      `protobuf:"varint,24,opt,name=minInt,proto3" json:"minInt,omitempty"`
	MaxUInt        uint64                     `protobuf:"varint,25,opt,name=maxUInt,proto3" json:"maxUInt,omitempty"`
	MinUInt        uint64                     `protobuf:"varint,26,opt,name=minUInt,proto3" json:"minUInt,omitempty"`
	MapVal         map[string]TestMessage_FOO `protobuf:"bytes,27,rep,name=mapVal,proto3" json:"mapVal,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=TestMessage_FOO"`
	// repeated google.protobuf.Any details = 28;
	//
	// Types that are valid to be assigned to OneOfVal:
	//
	//	*TestMessage_OneOfString
	//	*TestMessage_OneOfint
	OneOfVal      isTestMessage_OneOfVal `protobuf_oneof:"oneOfVal"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestMessage) Reset() {
	*x = TestMessage{}
	mi := &file_sample_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestMessage) ProtoMessage() {}

func (x *TestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestMessage.ProtoReflect.Descriptor instead.
func (*TestMessage) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{1}
}

func (x *TestMessage) GetNumberVal() int64 {
	if x != nil {
		return x.NumberVal
	}
	return 0
}

func (x *TestMessage) GetStringVal() string {
	if x != nil {
		return x.StringVal
	}
	return ""
}

func (x *TestMessage) GetFloatNum() float32 {
	if x != nil {
		return x.FloatNum
	}
	return 0
}

func (x *TestMessage) GetFixed32Num() uint32 {
	if x != nil {
		return x.Fixed32Num
	}
	return 0
}

func (x *TestMessage) GetFixed64Num() uint64 {
	if x != nil {
		return x.Fixed64Num
	}
	return 0
}

func (x *TestMessage) GetDoubleNum() float64 {
	if x != nil {
		return x.DoubleNum
	}
	return 0
}

func (x *TestMessage) GetSubMessage() *SubMessage {
	if x != nil {
		return x.SubMessage
	}
	return nil
}

func (x *TestMessage) GetEnumValue() TestMessage_FOO {
	if x != nil {
		return x.EnumValue
	}
	return TestMessage_UNKNOWN
}

func (x *TestMessage) GetNumber32Val() int32 {
	if x != nil {
		return x.Number32Val
	}
	return 0
}

func (x *TestMessage) GetSnumber32Val() int32 {
	if x != nil {
		return x.Snumber32Val
	}
	return 0
}

func (x *TestMessage) GetSnumber64Val() int64 {
	if x != nil {
		return x.Snumber64Val
	}
	return 0
}

func (x *TestMessage) GetUnumber32Val() uint32 {
	if x != nil {
		return x.Unumber32Val
	}
	return 0
}

func (x *TestMessage) GetUnumber64Val() uint64 {
	if x != nil {
		return x.Unumber64Val
	}
	return 0
}

func (x *TestMessage) GetSfixed32Num() int32 {
	if x != nil {
		return x.Sfixed32Num
	}
	return 0
}

func (x *TestMessage) GetSfixed64Num() int64 {
	if x != nil {
		return x.Sfixed64Num
	}
	return 0
}

func (x *TestMessage) GetBytesVAl() []byte {
	if x != nil {
		return x.BytesVAl
	}
	return nil
}

func (x *TestMessage) GetUnpacketInts() []int32 {
	if x != nil {
		return x.UnpacketInts
	}
	return nil
}

func (x *TestMessage) GetPacketInts() []uint32 {
	if x != nil {
		return x.PacketInts
	}
	return nil
}

func (x *TestMessage) GetSubMessages() []*SubMessage {
	if x != nil {
		return x.SubMessages
	}
	return nil
}

func (x *TestMessage) GetRepeatedBytes() [][]byte {
	if x != nil {
		return x.RepeatedBytes
	}
	return nil
}

func (x *TestMessage) GetRepeatedString() []string {
	if x != nil {
		return x.RepeatedString
	}
	return nil
}

func (x *TestMessage) GetPackedSfixed32() []int32 {
	if x != nil {
		return x.PackedSfixed32
	}
	return nil
}

func (x *TestMessage) GetMaxInt() int64 {
	if x != nil {
		return x.MaxInt
	}
	return 0
}

func (x *TestMessage) GetMinInt() int64 {
	if x != nil {
		return x.MinInt
	}
	return 0
}

func (x *TestMessage) GetMaxUInt() uint64 {
	if x != nil {
		return x.MaxUInt
	}
	return 0
}

func (x *TestMessage) GetMinUInt() uint64 {
	if x != nil {
		return x.MinUInt
	}
	return 0
}

func (x *TestMessage) GetMapVal() map[string]TestMessage_FOO {
	if x != nil {
		return x.MapVal
	}
	return nil
}

func (x *TestMessage) GetOneOfVal() isTestMessage_OneOfVal {
	if x != nil {
		return x.OneOfVal
	}
	return nil
}

func (x *TestMessage) GetOneOfString() string {
	if x != nil {
		if x, ok := x.OneOfVal.(*TestMessage_OneOfString); ok {
			return x.OneOfString
		}
	}
	return ""
}

func (x *TestMessage) GetOneOfint() int32 {
	if x != nil {
		if x, ok := x.OneOfVal.(*TestMessage_OneOfint); ok {
			return x.OneOfint
		}
	}
	return 0
}

type isTestMessage_OneOfVal interface {
	isTestMessage_OneOfVal()
}

type TestMessage_OneOfString struct {
	OneOfString string `protobuf:"bytes,29,opt,name=oneOfString,proto3,oneof"`
}

type TestMessage_OneOfint struct {
	OneOfint int32 `protobuf:"varint,30,opt,name=oneOfint,proto3,oneof"`
}

func (*TestMessage_OneOfString) isTestMessage_OneOfVal() {}

func (*TestMessage_OneOfint) isTestMessage_OneOfVal() {}

type UnknownFields struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	NumberVal     int32                  `protobuf:"varint,900,opt,name=numberVal,proto3" json:"numberVal,omitempty"`
	StringVal     string                 `protobuf:"bytes,901,opt,name=stringVal,proto3" json:"stringVal,omitempty"`
	Nested        *UnknownFields_Nested  `protobuf:"bytes,7,opt,name=nested,proto3" json:"nested,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnknownFields) Reset() {
	*x = UnknownFields{}
	mi := &file_sample_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnknownFields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownFields) ProtoMessage() {}

func (x *UnknownFields) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownFields.ProtoReflect.Descriptor instead.
func (*UnknownFields) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{2}
}

func (x *UnknownFields) GetNumberVal() int32 {
	if x != nil {
		return x.NumberVal
	}
	return 0
}

func (x *UnknownFields) GetStringVal() string {
	if x != nil {
		return x.StringVal
	}
	return ""
}

func (x *UnknownFields) GetNested() *UnknownFields_Nested {
	if x != nil {
		return x.Nested
	}
	return nil
}

type UnknownFields_Nested struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	StringVal     string                 `protobuf:"bytes,900,opt,name=stringVal,proto3" json:"stringVal,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UnknownFields_Nested) Reset() {
	*x = UnknownFields_Nested{}
	mi := &file_sample_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnknownFields_Nested) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnknownFields_Nested) ProtoMessage() {}

func (x *UnknownFields_Nested) ProtoReflect() protoreflect.Message {
	mi := &file_sample_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnknownFields_Nested.ProtoReflect.Descriptor instead.
func (*UnknownFields_Nested) Descriptor() ([]byte, []int) {
	return file_sample_proto_rawDescGZIP(), []int{2, 0}
}

func (x *UnknownFields_Nested) GetStringVal() string {
	if x != nil {
		return x.StringVal
	}
	return ""
}

var File_sample_proto protoreflect.FileDescriptor

var file_sample_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x30, 0x0a, 0x0a, 0x53, 0x75, 0x62,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x22, 0xf4, 0x08, 0x0a, 0x0b,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x75,
	0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x75,
	0x6d, 0x18, 0x05, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0a, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34,
	0x4e, 0x75, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x75, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x4e, 0x75,
	0x6d, 0x12, 0x2b, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0a, 0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2e,
	0x0a, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x10, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e,
	0x46, 0x4f, 0x4f, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x36,
	0x34, 0x56, 0x61, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x12, 0x52, 0x0c, 0x73, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x75, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0c,
	0x75, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x0c, 0x75, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e, 0x75, 0x6d, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x4e,
	0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x4e, 0x75,
	0x6d, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x10, 0x52, 0x0b, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x41, 0x6c,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x41, 0x6c,
	0x12, 0x26, 0x0a, 0x0c, 0x75, 0x6e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x73,
	0x18, 0x11, 0x20, 0x03, 0x28, 0x05, 0x42, 0x02, 0x10, 0x00, 0x52, 0x0c, 0x75, 0x6e, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61, 0x63, 0x6b,
	0x65, 0x74, 0x49, 0x6e, 0x74, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0d, 0x42, 0x02, 0x10, 0x01,
	0x52, 0x0a, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x49, 0x6e, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x0b,
	0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0b, 0x2e, 0x53, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0b,
	0x73, 0x75, 0x62, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x14, 0x20, 0x03,
	0x28, 0x0c, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x15, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x2a, 0x0a, 0x0e, 0x70, 0x61, 0x63,
	0x6b, 0x65, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x16, 0x20, 0x03, 0x28,
	0x0f, 0x42, 0x02, 0x10, 0x01, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x64, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x49, 0x6e, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6d, 0x69, 0x6e, 0x49, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6d,
	0x69, 0x6e, 0x49, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x49, 0x6e, 0x74,
	0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x6d, 0x61, 0x78, 0x55, 0x49, 0x6e, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6d, 0x69, 0x6e, 0x55, 0x49, 0x6e, 0x74, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x6d, 0x69, 0x6e, 0x55, 0x49, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x61, 0x70,
	0x56, 0x61, 0x6c, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x06, 0x6d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x12, 0x22, 0x0a, 0x0b, 0x6f,
	0x6e, 0x65, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12,
	0x1c, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x69, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x69, 0x6e, 0x74, 0x1a, 0x4b, 0x0a,
	0x0b, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e,
	0x54, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x46, 0x4f, 0x4f, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1a, 0x0a, 0x03, 0x46, 0x4f,
	0x4f, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06,
	0x0a, 0x02, 0x56, 0x31, 0x10, 0x01, 0x42, 0x0a, 0x0a, 0x08, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x56,
	0x61, 0x6c, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x56, 0x61,
	0x6c, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x56, 0x61, 0x6c, 0x12, 0x1d, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x18, 0x85, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x12, 0x2d, 0x0a, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x2e, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x52, 0x06, 0x6e, 0x65, 0x73, 0x74, 0x65,
	0x64, 0x1a, 0x27, 0x0a, 0x06, 0x4e, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x18, 0x84, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f,
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sample_proto_rawDescOnce sync.Once
	file_sample_proto_rawDescData = file_sample_proto_rawDesc
)

func file_sample_proto_rawDescGZIP() []byte {
	file_sample_proto_rawDescOnce.Do(func() {
		file_sample_proto_rawDescData = protoimpl.X.CompressGZIP(file_sample_proto_rawDescData)
	})
	return file_sample_proto_rawDescData
}

var file_sample_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_sample_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sample_proto_goTypes = []any{
	(TestMessage_FOO)(0),         // 0: TestMessage.FOO
	(*SubMessage)(nil),           // 1: SubMessage
	(*TestMessage)(nil),          // 2: TestMessage
	(*UnknownFields)(nil),        // 3: UnknownFields
	nil,                          // 4: TestMessage.MapValEntry
	(*UnknownFields_Nested)(nil), // 5: UnknownFields.Nested
}
var file_sample_proto_depIdxs = []int32{
	1, // 0: TestMessage.subMessage:type_name -> SubMessage
	0, // 1: TestMessage.enumValue:type_name -> TestMessage.FOO
	1, // 2: TestMessage.subMessages:type_name -> SubMessage
	4, // 3: TestMessage.mapVal:type_name -> TestMessage.MapValEntry
	5, // 4: UnknownFields.nested:type_name -> UnknownFields.Nested
	0, // 5: TestMessage.MapValEntry.value:type_name -> TestMessage.FOO
	6, // [6:6] is the sub-list for method output_type
	6, // [6:6] is the sub-list for method input_type
	6, // [6:6] is the sub-list for extension type_name
	6, // [6:6] is the sub-list for extension extendee
	0, // [0:6] is the sub-list for field type_name
}

func init() { file_sample_proto_init() }
func file_sample_proto_init() {
	if File_sample_proto != nil {
		return
	}
	file_sample_proto_msgTypes[1].OneofWrappers = []any{
		(*TestMessage_OneOfString)(nil),
		(*TestMessage_OneOfint)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sample_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sample_proto_goTypes,
		DependencyIndexes: file_sample_proto_depIdxs,
		EnumInfos:         file_sample_proto_enumTypes,
		MessageInfos:      file_sample_proto_msgTypes,
	}.Build()
	File_sample_proto = out.File
	file_sample_proto_rawDesc = nil
	file_sample_proto_goTypes = nil
	file_sample_proto_depIdxs = nil
}
